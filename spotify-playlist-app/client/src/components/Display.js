import React, { useState, useEffect } from 'react'
// import axios from 'axios';
import styled from 'styled-components'
import { useAuth } from '../context/AuthContext'
import { useSearch } from '../context/SearchContext'
import SearchResults from './SearchResults'
// import Playlist from '../components/Playlist';

export default function Display() {
	const { userData } = useAuth()
	const { searchTerm, searchResults, artists, albums, tracks, loading, error } = useSearch()
	const [playlist, setPlaylist] = useState([])
	const [activeFilter, setActiveFilter] = useState('')
	const [filteredResults, setFilteredResults] = useState([])

	const addToPlaylist = (item) => {
		setPlaylist([...playlist, item])
	}

	const formatSearchTerm = (searchTerm) => {
		return searchTerm
			.split(' ')
			.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
			.join(' ')
	}

	useEffect(() => {
		const filterResults = (filter) => {
			if (!searchResults) return;
	
			switch (filter) {
				case 'artists':
					setFilteredResults(artists || []);
					break;
				case 'songs':
					setFilteredResults(tracks || []);
					break;
				case 'albums':
					setFilteredResults(albums || []);
					break;
				default:
					setFilteredResults([...artists, ...albums, ...tracks]);
			}
		};
		filterResults(activeFilter);
	}, [activeFilter, searchResults, artists, albums, tracks]);

	const handleFilterSelect = (filter) => {
		setActiveFilter(filter === activeFilter ? '' : filter);
	}

	

	// const createPlaylist = async () => {
	//   const accessToken = localStorage.getItem('access_token');
	//   const userId = userData.id;
	//   try {
	//     const createResponse = await axios.post(
	//       `https://api.spotify.com/v1/users/${userId}/playlists`,
	//       {
	//         name: 'New Playlist',
	//         description: 'Generated by Spotify Playlist Generator',
	//         public: false,
	//       },
	//       {
	//         headers: {
	//           Authorization: `Bearer ${accessToken}`,
	//         },
	//       }
	//     );

	//     const playlistId = createResponse.data.id;

	//     await axios.post(
	//       `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
	//       {
	//         uris: playlist.map(item => item.uri),
	//       },
	//       {
	//         headers: {
	//           Authorization: `Bearer ${accessToken}`,
	//         },
	//       }
	//     );

	//     alert('Playlist created successfully!');
	//   } catch (error) {
	//     console.error('Error creating playlist:', error);
	//   }
	// };

	if (!userData) {
		return
	}

	return (
		<>
			{searchResults && !loading && !error && (
				<StyledDisplay>
					<Header>
						<SearchTerm>{formatSearchTerm(searchTerm)}</SearchTerm>
						<Filters $activeFilter={activeFilter}>
							<FilterButton
								$isActive={activeFilter === 'artists'}
								onClick={() => handleFilterSelect('artists')}
							>
								artists
							</FilterButton>
							<FilterButton
								$isActive={activeFilter === 'songs'}
								onClick={() => handleFilterSelect('songs')}
							>
								songs
							</FilterButton>
							<FilterButton
								$isActive={activeFilter === 'albums'}
								onClick={() => handleFilterSelect('albums')}
							>
								albums
							</FilterButton>
						</Filters>
					</Header>
					<SearchResults addToPlaylist={addToPlaylist} results={filteredResults}/>
					{/* <Playlist playlist={playlist} createPlaylist={createPlaylist} /> */}
				</StyledDisplay>
			)}
		</>
	)
}

const StyledDisplay = styled.div`
	max-width: 80rem;
	height: 70vh;
	background-color: #00000099;
	backdrop-filter: blur(7px);
	border-radius: 1rem;
	margin: 5rem auto;
	padding: 2rem;
	overflow: hidden;
	display: flex;
	flex-direction: column;
	justify-content: center;
	@media screen and (max-width: 799px) {
		margin: 5rem 2rem;
	}
	@media screen and (max-width: 768px) {
		margin: 5rem 1rem;
		padding: 1rem;
	}
`

const Header = styled.div`
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 1rem 0;
	margin-bottom: 1rem;
	border-bottom: 1px solid #00aa9050;
	@media screen and (max-width: 799px) {
		flex-direction: column;
		align-items: center;
	}
`

const SearchTerm = styled.h2`
	font-size: var(--font-size-xl);
	color: var(--color-light);
	@media screen and (max-width: 799px) {
		margin-bottom: 1rem;
	}
`

const Filters = styled.nav`
	display: flex;
	align-items: center;
	gap: 1rem;
`

const FilterButton = styled.button`
  background-color: ${props => props.$isActive ? 'var(--color-primary)' : '#00aa9025'};
  color: white;
  padding: 0.5rem 2rem;
  border: none;
  border-radius: 0.2rem;
  cursor: pointer;
  transition: .12s;
	text-shadow: 0 0 0.2rem #000000;
  &:hover {
    background-color: #00aa90;
  }
`